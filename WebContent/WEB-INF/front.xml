<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

	<!-- 스프링에서 지원하는 MVC 프레임워크 관련하여 여러 설정을 단축시킬 수 있는 태그 즉, 이 태그를 이용하면 개발자가 수많은 코드로 등록해야하는 
	태그 수를 줄여준다. 
	mvc:annotation-driven의 효과 : 여러 설정을 함축 해 놓은것뿐임
	1)DefaultAnnotationHandlerMapping
	  단, 이 핸들러 매핑만 등록됨. BeanNameURLHandlerMapping은 디폴트에서 제외된다
	2)AnnotaionMethodHandlerAdapter 가 등록 됨
	json 컨버터를 포함해서 총 7가지 이상의 유용한 컨버터가 등록되어있다.
	-->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes">
					<value>text/html;charset=utf-8</value>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven><!-- MVC가 지원하는 어노테이션을 이용하겠다는 선언 -->
	
	<!-- 스프링의 DispatcherServlet이 URL을 낚아챘기 때문에 원래 html과 같은 정적 자원 처리를 담당했던  DefaultServlet의 역할을 정상화 시킴.
	요청에 정적자원이 발견되면, DefaultServlet으로 포워딩시킴 -->
	<mvc:default-servlet-handler/> <!--정적자원을 지원하려면 이 핸들러를 선언해야한다. -->

	<!-- HandlerMapping 개발자가 명시하지 않아도 디폴트는
		1) BeanNameUrlHandlerMapping
		2) DefaultAnnotaionHandlerMapping
		ViewResolver 는 InternalResourceViewResolver 이지만,
		접두어, 접미어는 개발자가 결정해야 하므로 명시하게 될 수 밖에 없다 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/"
		p:suffix=".jsp"/>
		
	<!-- 한글 처리 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
			</list>
		</property>
	</bean>
	
	<!-- 파일 업로드를 위한 빈 설정 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1024000"/>
	</bean>
	
	<!-- auto creating & autowired -->
	<context:component-scan base-package="com.itbank.controller">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<!-- AOP --> 
<!-- 	
	<bean id="soundEffect" class="com.itbank.test.SoundEffect"></bean>
	<bean id="student" class="com.itbank.test.Teenager"></bean>
	
	<aop:config>
		<aop:aspect id="soundAspect" ref="soundEffect">
			<aop:pointcut expression="execution(public * com.itbank.test..*(..))" id="studentCut"/>
			<aop:before method="bell" pointcut-ref="studentCut"/>
		</aop:aspect>
	</aop:config>
-->
	<!-- 선언적 방법 : xml과 같은 외부 설정 파일을 이용하는 방법은 상당히 보편적이고, 광범위한 패턴을 적용할 수 있으나,
		섬세한 제어를 하려면 어노테이션을 적용해보자 -->
	<aop:aspectj-autoproxy/>
	<bean id="loginCheck" class="com.itbank.common.auth.LoginCheck"/> 

</beans>
